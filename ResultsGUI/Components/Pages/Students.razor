@page "/students"
@rendermode InteractiveServer

@inject ResultsModels.Structure.Results Results

<PageTitle>Counter</PageTitle>

<h1>Students</h1>

<br>
<h3>Average Grade Per Gender</h3>

<SfChart Title="Male v Female Performance">
    <ChartPrimaryXAxis ValueType="@Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryXAxis>
    <ChartArea>
        <ChartAreaBorder Width="0.2"></ChartAreaBorder>
    </ChartArea>
    <ChartPrimaryYAxis Title="Average Grade">
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@GenderAverages" XName="Name" YName="Male_Average" Name="Male" GroupName="Male" ColumnWidth="0.5" ColumnSpacing="0.3" Type="ChartSeriesType.Column">
            <ChartMarker>
                <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                    <ChartDataLabelFont Color="#ffffff" FontWeight="600"></ChartDataLabelFont>
                </ChartDataLabel>
            </ChartMarker>
        </ChartSeries>

        <ChartSeries DataSource="@GenderAverages" XName="Name" YName="Female_Average" Name="Female" GroupName="Female" ColumnWidth="0.5" ColumnSpacing="0.3" Type="ChartSeriesType.Column">
            <ChartMarker>
                <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                    <ChartDataLabelFont Color="#ffffff" FontWeight="600"></ChartDataLabelFont>
                </ChartDataLabel>
            </ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
</SfChart>

<QuickGrid Items="@FilteredStudents" Class="table" Pagination="pagination">
    <PropertyColumn Property="@(x => x.FirstName)" Sortable="true">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="firstNameFilter" @bind:event="oninput" placeholder="First name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(x => x.LastName)" Sortable="true">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="lastNameFilter" @bind:event="oninput" placeholder="Last name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(x => new {Form = x.Form!.Name}.Form )" Sortable="true" />
    <PropertyColumn Property="@(x => new { AverageGrade = x.AverageGrade!.Value }.AverageGrade)" Sortable="true" />

    <TemplateColumn Context="student">
        <a href="@($"student?id={student.StudentKey}")">View</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="pagination" />

@code
{
    public class AverageData
    {
        public required string Name { get; set; }
        public required decimal Male_Average { get; set; }
        public required decimal Female_Average { get; set; }
    }

    List<AverageData> GenderAverages
    {
        get
        {
            return [new AverageData() { Name = "Average Grade", Female_Average = Results.FemaleAverageGrade!.Value, Male_Average = Results.MaleAverageGrade!.Value }];
        }
    }
}

@code
{
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };

    private string firstNameFilter = string.Empty;
    private string lastNameFilter = string.Empty;

    IQueryable<ResultsModels.Structure.Student> FilteredStudents
    {
        get
        {
            if (string.IsNullOrEmpty(firstNameFilter) && string.IsNullOrEmpty(lastNameFilter))
            {
                return Results.Students.AsQueryable();
            }

            return Results.Students.Where(x => (!string.IsNullOrWhiteSpace(firstNameFilter) && x.FirstName.Contains(firstNameFilter, StringComparison.OrdinalIgnoreCase))
            || (!string.IsNullOrWhiteSpace(lastNameFilter) && x.LastName.Contains(lastNameFilter, StringComparison.OrdinalIgnoreCase))).AsQueryable();
        }
    }
}
