@page "/form"
@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject ResultsModels.Structure.Results Results

<PageTitle>Form</PageTitle>

<h1> Form @QueryStringGetter.GetForm(Results, NavManager.Uri).Name</h1>

<br>
<table width="50%">
    <tr>
        <td>Number of Students:</td>
        <td>@QueryStringGetter.GetForm(Results, NavManager.Uri).Students.Count</td>
    </tr>
    <tr>
        <td>Average Grade:</td>
        <td>@QueryStringGetter.GetForm(Results, NavManager.Uri).AverageGrade!.Value</td>
    </tr>
</table>

<br>
<h3>Average Grade Per Gender</h3>

<SfChart Title="Male v Female Performance">
    <ChartPrimaryXAxis ValueType="@Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
    </ChartPrimaryXAxis>
    <ChartArea>
        <ChartAreaBorder Width="0.2"></ChartAreaBorder>
    </ChartArea>
    <ChartPrimaryYAxis Title="Average Grade">
        <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@GenderAverages" XName="Form" YName="Male_Average" Name="Male" GroupName="Male" ColumnWidth="0.5" ColumnSpacing="0.3" Type="ChartSeriesType.Column">
            <ChartMarker>
                <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                    <ChartDataLabelFont Color="#ffffff" FontWeight="600"></ChartDataLabelFont>
                </ChartDataLabel>
            </ChartMarker>
        </ChartSeries>

        <ChartSeries DataSource="@GenderAverages" XName="Form" YName="Female_Average" Name="Female" GroupName="Female" ColumnWidth="0.5" ColumnSpacing="0.3" Type="ChartSeriesType.Column">
            <ChartMarker>
                <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                    <ChartDataLabelFont Color="#ffffff" FontWeight="600"></ChartDataLabelFont>
                </ChartDataLabel>
            </ChartMarker>
        </ChartSeries>
    </ChartSeriesCollection>
    <ChartLegendSettings Visible="true"></ChartLegendSettings>
    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
</SfChart>


<h3>Students</h3>

<QuickGrid Items="@FilteredStudents" Class="table">
    <PropertyColumn Property="@(x => x.FirstName)" Sortable="true">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="firstNameFilter" @bind:event="oninput" placeholder="First name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(x => x.LastName)" Sortable="true">
        <ColumnOptions>
            <div>
                <input type="search" autofocus @bind="lastNameFilter" @bind:event="oninput" placeholder="Last name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(x => new { AverageGrade = x.AverageGrade!.Value }.AverageGrade)" Sortable="true" />
    <PropertyColumn Property="@(x => x.Gender)" Sortable="true" />
    <TemplateColumn Context="student">
        <a href="@($"student?id={student.StudentKey}")">View</a>
    </TemplateColumn>
</QuickGrid>

@code
{
    public class AverageData
    {
        public required string Form { get; set; }
        public required decimal Male_Average { get; set; }
        public required decimal Female_Average { get; set; }
    }

    List<AverageData> GenderAverages
    {
        get
        {
            var form = QueryStringGetter.GetForm(Results, NavManager.Uri);

            return [new AverageData() { Form = form.Name, Female_Average = form.FemaleAverageGrade!.Value, Male_Average = form.MaleAverageGrade!.Value }];
        }
    }
}

@code {
    private class QueryStringGetter
    {
        public static string GetQueryString(string url)
        {
            var queryPart = url.Split("?").Last();
            var keyValue = queryPart.Split("=");
            if (!keyValue.First().Trim().Equals("name", StringComparison.OrdinalIgnoreCase))
            {
                throw new ArgumentException("Provide correct query");
            }

            return keyValue.Last().Trim();
        }

        public static ResultsModels.Structure.Form GetForm(ResultsModels.Structure.Results results, string uri)
        {
            var formName = GetQueryString(uri);

            var form = results.Forms.Single(x => x.Name.Equals(formName, StringComparison.OrdinalIgnoreCase));

            return form;
        }
    }
}

@code
{
    private string firstNameFilter = string.Empty;
    private string lastNameFilter = string.Empty;

    IQueryable<ResultsModels.Structure.Student> FilteredStudents
    {
        get
        {
            if (string.IsNullOrEmpty(firstNameFilter) && string.IsNullOrEmpty(lastNameFilter))
            {
                return @QueryStringGetter.GetForm(Results, NavManager.Uri).Students.AsQueryable();
            }

            return @QueryStringGetter.GetForm(Results, NavManager.Uri).Students.Where(x => (!string.IsNullOrWhiteSpace(firstNameFilter) && x.FirstName.Contains(firstNameFilter, StringComparison.OrdinalIgnoreCase))
            || (!string.IsNullOrWhiteSpace(lastNameFilter) && x.LastName.Contains(lastNameFilter, StringComparison.OrdinalIgnoreCase))).AsQueryable();
        }
    }
}
